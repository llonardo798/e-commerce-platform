# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.2
        ports:
          - 5433:5432
        env:
          POSTGRES_DB: order_management
          POSTGRES_USER: llonardo
          POSTGRES_PASSWORD: 719981612Leo
        options: >-
          --health-cmd="pg_isready -U llonardo -d order_management"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Wait for PostgreSQL to be ready
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5433 -U llonardo -d order_management; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Build product-catalog-service with Maven
      run: mvn clean package --file product-catalog-service/pom.xml

    - name: Build order-management-service with Maven
      run: mvn clean package --file order-management-service/pom.xml

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Deploy to server
      run: |
        echo "Deploying application..."
        # Aquí se puede agregar comandos para desplegar la aplicación a otro lugar
        # Por ejemplo, usando scp para copiar archivos a un servidor remoto
        # o usando kubectl para desplegar en un clúster de Kubernetes
